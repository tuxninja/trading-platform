name: Troubleshoot Trading Platform

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  troubleshoot:
    runs-on: ubuntu-latest
    name: Troubleshoot Deployment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Troubleshoot EC2 Instance
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ec2-user
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        echo "üîç Troubleshooting Trading Platform on $HOST"
        echo "=============================================="
        
        # Test SSH connectivity
        if ssh -i private_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 $USER@$HOST "echo 'SSH OK'"; then
          echo "‚úÖ SSH connectivity successful"
        else
          echo "‚ùå SSH connectivity failed"
          exit 1
        fi
        
        # Transfer and run the comprehensive troubleshooting script
        echo "üìÑ Transferring troubleshooting script..."
        scp -i private_key.pem -o StrictHostKeyChecking=no troubleshoot_production.sh $USER@$HOST:~/
        
        echo "üöÄ Running comprehensive production diagnostics..."
        ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
          # Run the comprehensive troubleshooting script
          chmod +x ~/troubleshoot_production.sh
          ~/troubleshoot_production.sh
          
          echo ""
          echo "üîß Additional Quick Diagnostics:"
          echo "üîç Trading Platform Troubleshooting Report"
          echo "========================================="
          
          # Basic system info
          echo "üìä System Information:"
          echo "Date: $(date)"
          echo "Hostname: $(hostname)"
          echo "Public IP: $(curl -s http://169.254.169.254/latest/meta-data/public-ipv4 || echo 'Unable to get IP')"
          echo
          
          # Change to trading directory
          cd /opt/trading || { echo "‚ùå Cannot access /opt/trading"; exit 1; }
          
          # Docker status
          echo "üê≥ Docker Status:"
          echo "Docker version: $(docker --version)"
          echo "Docker daemon: $(systemctl is-active docker)"
          echo
          
          # Container status
          echo "üì¶ Container Status:"
          docker ps -a
          echo
          
          # Docker compose status
          echo "üèóÔ∏è Docker Compose Status:"
          if [ -f docker-compose.prod.yml ]; then
            docker-compose -f docker-compose.prod.yml ps
          else
            echo "‚ùå docker-compose.prod.yml not found"
          fi
          echo
          
          # Port bindings and networking
          echo "üåê Network and Ports:"
          echo "--- Docker port mappings ---"
          docker ps --format "table {{.Names}}\t{{.Ports}}"
          echo
          echo "--- System listening ports ---"
          sudo netstat -tlnp | grep -E ':(80|443|8000|3000)' || echo "No services on ports 80,443,8000,3000"
          echo
          
          # Container logs (last 10 lines each)
          echo "üìã Recent Container Logs:"
          
          echo "--- Frontend Container ---"
          if docker ps -q -f name=trading-frontend | grep -q .; then
            docker logs trading-frontend --tail 10
          else
            echo "Frontend container not running"
          fi
          echo
          
          echo "--- Backend Container ---"
          if docker ps -q -f name=trading-backend | grep -q .; then
            docker logs trading-backend --tail 10
          else
            echo "Backend container not running"
          fi
          echo
          
          echo "--- Scheduler Container ---"
          if docker ps -q -f name=trading-scheduler | grep -q .; then
            docker logs trading-scheduler --tail 10
          else
            echo "Scheduler container not running"
          fi
          echo
          
          # Test internal connectivity
          echo "üîó Internal Connectivity Tests:"
          
          # Test if frontend is responding internally
          if docker ps -q -f name=trading-frontend | grep -q .; then
            echo "Testing frontend container internal access..."
            docker exec trading-frontend curl -f http://localhost:80/ 2>/dev/null && echo "‚úÖ Frontend responds internally" || echo "‚ùå Frontend not responding internally"
          fi
          
          # Test if backend is responding internally  
          if docker ps -q -f name=trading-backend | grep -q .; then
            echo "Testing backend container internal access..."
            docker exec trading-backend curl -f http://localhost:8000/ 2>/dev/null && echo "‚úÖ Backend responds internally" || echo "‚ùå Backend not responding internally"
          fi
          echo
          
          # Check docker-compose configuration
          echo "üìÑ Docker Compose Configuration:"
          if [ -f docker-compose.prod.yml ]; then
            echo "‚úÖ docker-compose.prod.yml exists"
            echo "Services configured:"
            grep -E "^  [a-zA-Z]" docker-compose.prod.yml | sed 's/:.*$//' | sort
            echo
            echo "Port mappings in compose file:"
            grep -A 2 -B 2 "ports:" docker-compose.prod.yml || echo "No port mappings found"
          else
            echo "‚ùå docker-compose.prod.yml missing"
          fi
          echo
          
          # System resources
          echo "üíæ System Resources:"
          echo "Disk usage:"
          df -h / | tail -1
          echo "Memory usage:"
          free -h | head -2
          echo "CPU load:"
          uptime
          echo
          
          echo "========================================="
          echo "üèÅ Troubleshooting complete!"
        EOF
        
        # Cleanup
        rm private_key.pem