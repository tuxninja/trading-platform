name: Deploy Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/infrastructure.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: 1.6.0
  AWS_REGION: us-east-1

jobs:
  terraform:
    runs-on: ubuntu-latest
    name: Terraform
    defaults:
      run:
        working-directory: terraform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Create terraform.tfvars
      run: |
        cat > terraform.tfvars << EOF
        aws_region = "${{ env.AWS_REGION }}"
        environment = "production"
        project_name = "trading-platform"
        domain_name = "${{ secrets.DOMAIN_NAME }}"
        create_route53_zone = ${{ secrets.CREATE_ROUTE53_ZONE || 'false' }}
        instance_type = "${{ secrets.INSTANCE_TYPE || 't3.micro' }}"
        root_volume_size = ${{ secrets.ROOT_VOLUME_SIZE || '20' }}
        ec2_public_key = "${{ secrets.EC2_PUBLIC_KEY }}"
        ssh_allowed_ips = ${{ secrets.SSH_ALLOWED_IPS || '["0.0.0.0/0"]' }}
        secret_key = "${{ secrets.SECRET_KEY }}"
        news_api_key = "${{ secrets.NEWS_API_KEY }}"
        alpha_vantage_key = "${{ secrets.ALPHA_VANTAGE_KEY }}"
        enable_detailed_monitoring = false
        backup_retention_days = 7
        additional_tags = {
          ManagedBy = "github-actions"
          Repository = "${{ github.repository }}"
        }
        EOF

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
                       -backend-config="key=trading-platform/terraform.tfstate" \
                       -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -out=tfplan
        terraform show -no-color tfplan > plan.txt
      env:
        TF_VAR_ec2_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
        TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
        TF_VAR_news_api_key: ${{ secrets.NEWS_API_KEY }}
        TF_VAR_alpha_vantage_key: ${{ secrets.ALPHA_VANTAGE_KEY }}

    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('terraform/plan.txt', 'utf8');
          const maxGitHubBodyCharacters = 65536;

          function chunkSubstr(str, size) {
            const numChunks = Math.ceil(str.length / size)
            const chunks = new Array(numChunks)
            for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
              chunks[i] = str.substr(o, size)
            }
            return chunks
          }

          // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
          var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
          
          for (let i = 0; i < plans.length; i++) {
            const output = `### Terraform Plan Output (${i + 1}/${plans.length})
            
            \`\`\`
            ${plans[i]}
            \`\`\`
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`terraform\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.inputs.action == 'apply')
      run: terraform apply -auto-approve tfplan
      env:
        TF_VAR_ec2_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
        TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
        TF_VAR_news_api_key: ${{ secrets.NEWS_API_KEY }}
        TF_VAR_alpha_vantage_key: ${{ secrets.ALPHA_VANTAGE_KEY }}

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve
      env:
        TF_VAR_ec2_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
        TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
        TF_VAR_news_api_key: ${{ secrets.NEWS_API_KEY }}
        TF_VAR_alpha_vantage_key: ${{ secrets.ALPHA_VANTAGE_KEY }}

    - name: Save Terraform Outputs
      if: github.ref == 'refs/heads/main' && steps.apply.outcome == 'success'
      run: |
        terraform output -json > outputs.json
        echo "INSTANCE_IP=$(terraform output -raw public_ip)" >> $GITHUB_ENV
        echo "APPLICATION_URL=$(terraform output -raw application_url)" >> $GITHUB_ENV

    - name: Update Repository Secrets
      if: github.ref == 'refs/heads/main' && steps.apply.outcome == 'success'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Update EC2_HOST secret with the new instance IP
          await github.rest.actions.createOrUpdateRepoSecret({
            owner: context.repo.owner,
            repo: context.repo.repo,
            secret_name: 'EC2_HOST',
            encrypted_value: await github.rest.actions.getRepoPublicKey({
              owner: context.repo.owner,
              repo: context.repo.repo,
            }).then(key => {
              const sodium = require('tweetsodium');
              const bytes = Buffer.from('${{ env.INSTANCE_IP }}');
              const encrypted = sodium.seal(bytes, Buffer.from(key.data.key, 'base64'));
              return Buffer.from(encrypted).toString('base64');
            })
          });

    - name: Post Infrastructure Status
      if: always()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          STATUS="✅ Success"
          COLOR="good"
          MESSAGE="Infrastructure deployment completed"
        else
          STATUS="❌ Failed"
          COLOR="danger"
          MESSAGE="Infrastructure deployment failed"
        fi
        
        if [ ! -z "$SLACK_WEBHOOK" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MESSAGE $STATUS\",\"color\":\"$COLOR\",\"fields\":[{\"title\":\"Action\",\"value\":\"${{ github.event.inputs.action || 'apply' }}\",\"short\":true},{\"title\":\"Environment\",\"value\":\"production\",\"short\":true}]}" \
            $SLACK_WEBHOOK
        fi

  cost-estimate:
    runs-on: ubuntu-latest
    name: Cost Estimation
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: terraform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}

    - name: Generate Infracost cost estimate
      run: |
        # Create a temporary tfvars file for cost estimation
        cat > terraform.tfvars << EOF
        aws_region = "us-east-1"
        environment = "production"
        project_name = "trading-platform"
        domain_name = "example.com"
        instance_type = "t3.micro"
        root_volume_size = 20
        ec2_public_key = "ssh-rsa AAAAB3NzaC1yc2E... dummy-key"
        EOF
        
        infracost breakdown --path=. \
          --format=json \
          --out-file=infracost.json

    - name: Post cost estimate to PR
      run: |
        infracost comment github --path=infracost.json \
          --repo=${{ github.repository }} \
          --github-token=${{ github.token }} \
          --pull-request=${{ github.event.pull_request.number }} \
          --behavior=update